import React, { useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import NavbarComponent from "../assets/component/user/userNavbar";

const PaymentPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { bills, addressId } = location.state || {};

  const [allBills, setAllBills] = useState(bills || []);
  const [selectedBills, setSelectedBills] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö billId ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (string)

  if (!bills || bills.length === 0) {
    return <div className="text-red-500 p-4">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞</div>;
  }

  // toggle ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏¥‡∏• ‡πÇ‡∏î‡∏¢‡πÅ‡∏õ‡∏•‡∏á billId ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö selectedBills
  const toggleBillSelection = (billId) => {
    const strId = String(billId);
    setSelectedBills((prev) =>
      prev.includes(strId)
        ? prev.filter((id) => id !== strId)
        : [...prev, strId]
    );
  };

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
  const selectedBillDetails = allBills.filter((bill) =>
    selectedBills.includes(String(bill.id))
  );

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
  const totalAmount = selectedBillDetails.reduce(
    (sum, bill) => sum + parseFloat(bill.amount_due),
    0
  );

  const handleConfirmPayment = async () => {
    if (selectedBills.length === 0) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏•
      const response = await fetch(`http://localhost:3000/api/bills/pay`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          address_id: addressId,
          billIds: selectedBills,
        }),
      });

      if (!response.ok) throw new Error("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏≥‡∏£‡∏∞ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
      const updatedData = await fetch(
        `http://localhost:3000/api/bills?address_id=${addressId}`
      );
      if (!updatedData.ok) throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ");
      const dataJson = await updatedData.json();

      setAllBills(dataJson.bills);
      setSelectedBills([]);

      alert(`‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${totalAmount.toFixed(2)} ‡∏ö‡∏≤‡∏ó ‚úÖ`);
    } catch (error) {
      console.error(error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‚ùå");
    }
  };

  return (
    <div className="bg-gray-200 min-h-screen">
      <NavbarComponent />
      <div className="p-4 max-w-xl mx-auto">
        <h1 className="text-xl font-bold mb-4">üí≥ ‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</h1>
        <p className="mb-2">
          <strong>üè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ID:</strong> {addressId}
        </p>

        <div className="space-y-2 mb-4">
          {allBills.map((bill) => (
            <div
              key={bill.id} // ‡πÉ‡∏ä‡πâ bill.id ‡πÄ‡∏õ‡πá‡∏ô key ‡∏à‡∏∞‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏ß‡πà‡∏≤ index
              className="p-3 border bg-gray-100 rounded-md"
            >
              <div>
                <p>üíµ {bill.amount_due} ‡∏ö‡∏≤‡∏ó</p>
                <p className="mx-1">
                  üìÖ ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î:{" "}
                  {new Date(bill.due_date).toLocaleDateString("th-TH")}
                </p>
                <p className="mx-1">
                  üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {bill.status === "1" ? "‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß" : "‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞"}
                </p>
              </div>
              {bill.status !== "1" && (
                <div className="flex items-center mt-2">
                  <input
                    id={`checkbox-${bill.id}`}
                    type="checkbox"
                    checked={selectedBills.includes(String(bill.id))}
                    onChange={() => toggleBillSelection(bill.id)}
                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <label
                    htmlFor={`checkbox-${bill.id}`}
                    className="ms-2 text-sm text-gray-900"
                  >
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ
                  </label>
                </div>
              )}
            </div>
          ))}
        </div>

        <div className="mb-4 text-right text-lg font-semibold">
          ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {totalAmount.toFixed(2)} ‡∏ö‡∏≤‡∏ó
        </div>

        <button
          onClick={handleConfirmPayment}
          className="w-full text-white bg-green-600 hover:bg-green-700 font-semibold py-2 rounded"
        >
          ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        </button>
      </div>
    </div>
  );
};

export default PaymentPage;
