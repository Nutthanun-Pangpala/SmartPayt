import axios from "axios";
import React, { useCallback, useEffect, useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";
import GenerateBarcode from "./GenerateBarcode";

const formatBaht = (num) => {
  const n = Number(num || 0);
  return n.toLocaleString("th-TH", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
};

const formatDateTH = (dateStr) => {
  if (!dateStr) return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
  const d = new Date(dateStr);
  if (isNaN(d)) return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
  return d.toLocaleDateString("th-TH", { day: "2-digit", month: "2-digit", year: "numeric" });
};

const StatusBadge = ({ verified }) => (
  <span
    className={`inline-flex items-center gap-1 rounded-full px-2.5 py-1 text-xs font-medium
      ${verified ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"}`}
  >
    <i className={`fi ${verified ? "fi-sr-shield-check" : "fi-sr-shield-exclamation"}`} />
    {verified ? "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"}
  </span>
);

const Chevron = ({ open }) => (
  <svg
    className={`h-4 w-4 transition-transform ${open ? "rotate-180" : ""}`}
    viewBox="0 0 20 20"
    fill="currentColor"
  >
    <path
      fillRule="evenodd"
      d="M5.23 7.21a.75.75 0 011.06.02L10 11.17l3.71-3.94a.75.75 0 011.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
      clipRule="evenodd"
    />
  </svg>
);

// Skeleton ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î
const AddressSkeleton = () => (
  <div className="rounded-2xl border shadow-sm bg-white overflow-hidden animate-pulse">
    <div className="p-4 border-b bg-gray-50">
      <div className="h-4 bg-gray-200 rounded w-40" />
      <div className="mt-3 h-3 bg-gray-200 rounded w-56" />
      <div className="mt-2 h-3 bg-gray-200 rounded w-64" />
    </div>
    <div className="p-4">
      <div className="h-8 bg-gray-200 rounded w-48" />
      <div className="mt-3 h-20 bg-gray-100 rounded" />
    </div>
  </div>
);

const UserAddressesCard = () => {
  const [userAddresses, setUserAddresses] = useState([]);
  const [billsMap, setBillsMap] = useState({});
  const [expanded, setExpanded] = useState({});
  const [loading, setLoading] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const navigate = useNavigate();

  const lineUserId = useMemo(() => localStorage.getItem("lineUserId"), []);

  const load = useCallback(async () => {
    if (!lineUserId) {
      setErrorMsg("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
      return;
    }
    setLoading(true);
    setErrorMsg("");
    try {
      // ‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
      const response = await axios.get(
        `${import.meta.env.VITE_API_BASE_URL}/api/address/${lineUserId}`
      );
      const addresses = response.data?.addresses || [];
      setUserAddresses(addresses);

      // ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      const billsData = await Promise.all(
        addresses.map(async (address) => {
          if (!address.address_verified) {
            return { address_id: address.address_id, bills: [] };
          }
          try {
            const res = await axios.get(
              `${import.meta.env.VITE_API_BASE_URL}/api/bills/${address.address_id}`
            );
            const unpaid = (res.data?.bills || []).filter(
              (b) => String(b.status) === "0" || String(b.status) === "2"
            );
            return { address_id: address.address_id, bills: unpaid };
          } catch (e) {
            console.error(`Error fetching bills for ${address.address_id}:`, e);
            return { address_id: address.address_id, bills: [] };
          }
        })
      );

      const map = billsData.reduce((acc, { address_id, bills }) => {
        acc[address_id] = bills;
        return acc;
      }, {});
      setBillsMap(map);
    } catch (e) {
      console.error("Error fetching addresses:", e);
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° user-friendly ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      const status = e?.response?.status;
      if (status === 404) {
        setErrorMsg("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì");
      } else if (status === 401) {
        setErrorMsg("‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
      } else {
        setErrorMsg("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
      }
    } finally {
      setLoading(false);
    }
  }, [lineUserId]);

  useEffect(() => {
    load();
  }, [load]);

  const toggleExpand = (id) => setExpanded((prev) => ({ ...prev, [id]: !prev[id] }));

  // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô error ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å UX
  const ErrorPanel = () => (
    <div
      className="rounded-2xl border border-red-200 bg-red-50 p-5 text-center"
      role="alert"
      aria-live="polite"
    >
      <div className="flex items-center justify-center gap-2 text-red-700 font-semibold">
        <i className="fi fi-rr-triangle-warning" />
        {errorMsg || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"}
      </div>
      <p className="mt-1 text-sm text-red-700/80">
        ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
      </p>
      <div className="mt-3 flex flex-col sm:flex-row items-center justify-center gap-2">
        <button
          onClick={load}
          className="rounded-lg border px-4 py-2 text-sm hover:bg-white"
        >
          ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        </button>
        <button
          onClick={() => navigate("/")}
          className="rounded-lg bg-emerald-600 px-4 py-2 text-sm text-white hover:bg-emerald-700"
        >
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
        </button>
      </div>
    </div>
  );

  // ‡∏Å‡∏•‡πà‡∏≠‡∏á empty state ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  const EmptyState = () => (
    <div className="rounded-2xl border p-6 text-center">
      <div className="text-4xl mb-2">üìç</div>
      <div className="font-semibold">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>
      <p className="text-sm text-gray-500 mt-1">
        ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      </p>
      <div className="mt-3">
        <button
          onClick={() => navigate("/")}
          className="rounded-lg bg-emerald-600 px-4 py-2 text-sm text-white hover:bg-emerald-700"
        >
          ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
        </button>
      </div>
    </div>
  );

  // ‡∏ü‡∏•‡∏≠‡∏ó‡∏õ‡∏∏‡πà‡∏° ‚Äú‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‚Äù (‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÄ‡∏™‡∏°‡∏≠)
  const FloatingCTA = () => (
    <button
      onClick={() => navigate("/")}
      title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
      className="fixed bottom-24 right-4 z-40 rounded-full bg-emerald-600 text-white shadow-lg px-4 py-3 hover:bg-emerald-700 active:scale-[.98]"
      style={{ paddingInline: "14px" }}
    >
      <span className="inline-flex items-center gap-2 text-sm">
        <i className="fi fi-rr-map-marker-plus" />
        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
      </span>
    </button>
  );

  return (
    <div className="p-4">
      <div className="mb-3 flex items-center justify-between">
        <h1 className="text-lg md:text-xl font-bold">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h1>
        {loading && <span className="text-sm text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</span>}
      </div>

      {/* Error State */}
      {errorMsg && !loading && <ErrorPanel />}

      {/* Loading Skeleton */}
      {loading && !errorMsg && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <AddressSkeleton />
          <AddressSkeleton />
        </div>
      )}

      {/* Empty State */}
      {!loading && !errorMsg && userAddresses.length === 0 && <EmptyState />}

      {/* Address List */}
      {!loading && !errorMsg && userAddresses.length > 0 && (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {userAddresses.map((address) => {
              const id = address.address_id;
              const bills = billsMap[id] || [];
              const totalAmount = bills.reduce((sum, b) => {
                const n = Number(b.amount_due);
                return !isNaN(n) && n > 0 ? sum + n : sum;
              }, 0);

              const open = !!expanded[id];
              const verified = !!address.address_verified;

              return (
                <div
                  key={id}
                  className="rounded-2xl border shadow-sm bg-white overflow-hidden"
                >
                  {/* Header */}
                  <div className="p-4 border-b bg-gray-50">
                    <div className="flex items-start justify-between gap-3">
                      <div className="min-w-0">
                        <div className="flex items-center gap-2 flex-wrap">
                          <span className="inline-flex items-center gap-2 text-base font-semibold">
                            <i className="fi fi-ss-house-building" />
                            ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: {address.house_no || "-"}
                          </span>
                          <StatusBadge verified={verified} />
                        </div>
                        <div className="mt-1 text-sm text-gray-600">
                          ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà {address.village_no ?? "-"} ‚Ä¢ {address.Alley || "-"}
                        </div>
                        <div className="text-sm text-gray-600">
                          ‡∏ï.{address.sub_district || "-"} ‡∏≠.{address.district || "-"} ‡∏à.{address.province || "-"} {address.postal_code || ""}
                        </div>
                      </div>

                      {/* Barcode (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß) */}
                      {verified && (
                        <div className="shrink-0">
                          <GenerateBarcode
                            addressId={String(id)}
                            status={verified ? 1 : 0}
                            addressInfo={address}
                          />
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Summary / Controls */}
                  <div className="p-4">
                    {verified ? (
                      <div className="flex items-center justify-between flex-wrap gap-2">
                        <div className="flex items-center gap-3">
                          <span className="inline-flex items-center rounded-lg bg-red-50 text-red-700 px-3 py-1 text-sm font-medium">
                            <i className="fi fi-sr-baht-sign mr-1" />
                            ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ö‡∏¥‡∏•: {formatBaht(totalAmount)} ‡∏ö‡∏≤‡∏ó
                          </span>
                          <span className="text-xs text-gray-500">
                            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏¥‡∏• {bills.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                          </span>
                        </div>
                        <button
                          type="button"
                          onClick={() => toggleExpand(id)}
                          className="inline-flex items-center gap-2 rounded-lg border px-3 py-1.5 text-sm hover:bg-gray-50"
                        >
                          ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                          <Chevron open={open} />
                        </button>
                      </div>
                    ) : (
                      <div className="rounded-lg bg-yellow-50 text-yellow-800 text-sm px-3 py-2">
                        <i className="fi fi-sr-info mr-1" />
                        ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏®‡∏ö‡∏≤‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
                      </div>
                    )}

                    {/* Expanded Bills */}
                    {verified && open && (
                      <div className="mt-3 space-y-2">
                        <h3 className="text-sm font-semibold">üìÑ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏•</h3>

                        {bills.length > 0 ? (
                          <>
                            {bills
                              .slice()
                              .sort((a, b) => new Date(b.due_date) - new Date(a.due_date))
                              .map((bill, idx) => {
                                const isPending = String(bill.status) === "2";
                                return (
                                  <div
                                    key={idx}
                                    className="rounded-lg border bg-gray-50 p-3"
                                  >
                                    <div className="flex items-center justify-between gap-3">
                                      <div className="text-sm">
                                        <div>
                                          ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: <b>{formatBaht(bill.amount_due)}</b> ‡∏ö‡∏≤‡∏ó
                                        </div>
                                        <div className="text-gray-600">
                                          ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: {formatDateTH(bill.due_date)}
                                        </div>
                                      </div>
                                      <span
                                        className={`text-xs font-medium rounded-full px-2.5 py-1
                                          ${isPending ? "bg-yellow-100 text-yellow-800" : "bg-red-100 text-red-700"}`}
                                      >
                                        {isPending ? "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞"}
                                      </span>
                                    </div>
                                  </div>
                                );
                              })}

                            {/* Pay button ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏¥‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 0 */}
                            {bills.some((b) => String(b.status) === "0") && (
                              <div className="pt-2 text-center">
                                <button
                                  onClick={() =>
                                    navigate("/payment/", {
                                      state: {
                                        bills,
                                        addressId: id,
                                        totalAmount,
                                      },
                                    })
                                  }
                                  type="button"
                                  className="inline-flex items-center gap-2 rounded-full bg-green-600 hover:bg-green-700 text-white px-6 py-2 text-sm font-medium"
                                >
                                  <i className="fi fi-sr-credit-card" />
                                  ‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
                                </button>
                              </div>
                            )}
                          </>
                        ) : (
                          <div className="text-sm text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞</div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏≠‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
          <FloatingCTA />
        </>
      )}
    </div>
  );
};

export default UserAddressesCard;
