const bcrypt = require('bcrypt');
const db = require('../db/dbConnection');
const jwt = require('jsonwebtoken');


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏° - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
exports.register = (req, res) => {
    const { admin_username, admin_password } = req.body;
    if (!admin_username || !admin_password) {
        return res.status(400).json({ message: "Missing fields" });
    }

    // ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    bcrypt.hash(admin_password, 10, (err, hashedPassword) => {
        if (err) {
            console.error('Hashing Error:', err);
            return res.status(500).json({ message: 'Error hashing password' });
        }

        const sql = 'INSERT INTO admins (admin_username, admin_password) VALUES (?, ?)';
        db.query(sql, [admin_username, hashedPassword], (err, result) => {
            if (err) {
                console.error('Registration Error:', err);
                return res.status(500).json({
                    message: 'User registration failed',
                    error: err.message
                });
            }
            res.json({ message: 'User registered successfully' });
        });
    });
};

exports.login = (req, res) => {
    const { admin_username, admin_password } = req.body;
    if (!admin_username || !admin_password) {
        return res.status(400).json({ message: "Missing fields" });
    }

    const sql = 'SELECT * FROM admins WHERE admin_username = ?';
    db.query(sql, [admin_username], async (err, results) => {
        if (err || results.length === 0) {
            return res.status(401).json({ message: 'User not found' });
        }

        const admin = results[0];

        // üîí ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
        const isPasswordValid = await bcrypt.compare(admin_password, admin.admin_password);
        if (!isPasswordValid) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        // üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡∏û‡∏£‡πâ‡∏≠‡∏° role
        const Admintoken = jwt.sign(
            { id: admin.id, role: admin.role }, 
            process.env.JWT_SECRET, 
            { expiresIn: '1h' }
        );

        res.json({ Admintoken });
    });
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ AdminMain
exports.getUserCount = (req, res) => {
  const sql = `
    SELECT 
      (SELECT COUNT(*) FROM users) AS totalUsers,
      (SELECT COUNT(*) FROM addresses) AS totalAddress
  `;
  db.query(sql, (err, results) => {
    if (err) {
      console.error('Error counting users:', err);
      return res.status(500).json({
        message: 'Failed to count users',
        error: err.message
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const { totalUsers, totalAddress } = results[0];
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
    res.json({
      totalUsers,
      totalAddress
    });
  });
};

exports.getWasteStats = (req, res) => {
    const sql = 'SELECT waste_type, COUNT(*) as count FROM waste_disposal GROUP BY waste_type';
    db.query(sql, (err, results) => {
        if (err) {
            console.error('Error getting waste stats:', err);
            return res.status(500).json({
                message: 'Failed to get waste statistics',
                error: err.message
            });
        }

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
        const wasteData = [
            { name: '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', value: 0 },
            { name: '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢', value: 0 },
            { name: '‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•', value: 0 }
        ];

        results.forEach(item => {
            if (item.waste_type === 'general') {
                wasteData[0].value = item.count;
            } else if (item.waste_type === 'hazardous') {
                wasteData[1].value = item.count;
            } else if (item.waste_type === 'recycle') {
                wasteData[2].value = item.count;
            }
        });

        res.json(wasteData);
    });
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ AdminService

exports.getUsers = (req, res) => {
    const { page = 1, search = '', sortField = 'id', sortDirection = 'ASC' } = req.query;
    const limit = 10;
    const offset = (page - 1) * limit;

    // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ORDER BY
    const allowedSortFields = ['lineUserId', 'name', 'ID_card_No', 'Phone_No', 'Email', 'created_at', 'updated_at'];
    const safeSortField = allowedSortFields.includes(sortField) ? sortField : 'created_at'; // Default ‡πÄ‡∏õ‡πá‡∏ô created_at
    const safeSortDirection = sortDirection === 'desc' ? 'DESC' : 'ASC';

    let searchCondition = 'WHERE 1=1';
    let searchParams = [];

    if (search) {
        searchCondition += `
            AND (c.ID_card_No LIKE ? 
            OR c.Phone_No LIKE ? 
            OR c.Email LIKE ? 
            OR c.name LIKE ?)
        `;
        searchParams = [`%${search}%`, `%${search}%`, `%${search}%`, `%${search}%`];
    }

   const countSql = `
    SELECT COUNT(*) AS total 
    FROM users c
    JOIN addresses a ON c.lineUserId = a.lineUserId
    ${searchCondition}
`;

    const sql = `
        SELECT c.lineUserId, c.name, c.ID_card_No, c.Phone_No, c.Email, c.created_at, c.updated_at 
        FROM users c
        ${searchCondition}
        ORDER BY ${safeSortField} ${safeSortDirection}
        LIMIT ? OFFSET ?
    `;

    db.query(countSql, searchParams, (err, countResults) => {
        if (err) {
            return res.status(500).json({ message: 'Failed to fetch users', error: err.message });
        }

        const total = countResults[0].total;
        const totalPages = Math.ceil(total / limit);

        db.query(sql, [...searchParams, limit, offset], (err, results) => {
            if (err) {
                return res.status(500).json({ message: 'Failed to fetch users', error: err.message });
            }

            res.json({
                users: results,
                totalPages,
                currentPage: parseInt(page),
                totalUsers: total
            });
        });
    });
};


exports.getUserDetails = async (req, res) => {
    try {
      const { lineUserId } = req.params; // ‡∏î‡∏∂‡∏á lineUserId ‡∏à‡∏≤‡∏Å URL parameters
  
      if (!lineUserId) {
        return res.status(400).json({ message: "lineUserId ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠" });
      }
  
      // Query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const query = "SELECT * FROM users WHERE lineUserId = ?";
      const [userData] = await db.promise().query(query, [lineUserId]);
  
      if (userData.length === 0) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
      }
  
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Frontend
      res.status(200).json({
        message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        user: userData[0], // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡πà‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      });
  
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
  };
  exports.getUserAddress = async (req, res) => {
    try {
      const { lineUserId } = req.params; // ‡∏î‡∏∂‡∏á lineUserId ‡∏à‡∏≤‡∏Å URL parameters
  
      if (!lineUserId) {
        return res.status(400).json({ message: "lineUserId ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠" });
      }
  
      // Query ‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const query = "SELECT * FROM addresses WHERE lineUserId = ?";
      const [addresses] = await db.promise().query(query, [lineUserId]);
  
      if (addresses.length === 0) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" });
      }
  
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      res.status(200).json({
        message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        addresses: addresses, // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö arrayN
      });
  
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
  };

  exports.getuserAddressBill =  async (req, res) => {
    try {
      const { address_id } = req.params;
  
      const query = "SELECT * FROM bills WHERE address_id = ?";
      const [bills] = await db.promise().query(query, [address_id]);
  
      if (bills.length === 0) {
        return res.status(200).json({ bills: [] }); // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å 404 ‚Üí 200 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏¥‡∏•‡πÄ‡∏õ‡πá‡∏ô []
      }
  
      res.status(200).json({ bills });
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
  };
  exports.verifyUserAddress = async (req, res) => {
    const { addressId } = req.params;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ addressId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!addressId) {
        return res.status(400).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const query = 'UPDATE addresses SET address_verified = ? WHERE address_id = ?';
    
    db.query(query, [1, addressId], (err, result) => {
        if (err) {
            console.error('Error updating address verification:', err);
            return res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà' });
        }

        if (result.affectedRows === 0) {
            return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' });
        }

        return res.status(200).json({ success: true, message: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
    });
};

//ManuleBill
exports.adduserAsdress = async(req, res) => {
    const lineUserId = req.params.lineUserId; // ‡∏£‡∏±‡∏ö lineUserId ‡∏à‡∏≤‡∏Å URL
    const {
      house_no,
      Alley,
      province,
      district,
      sub_district,
      postal_code,
      address_verified,
      created_at,
      updated_at,
    } = req.body;
  
    const query = `
      INSERT INTO addresses (
        lineUserId, house_no, Alley, province, district, sub_district, postal_code, address_verified, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;
  
    const values = [
      lineUserId,  // ‡πÉ‡∏ä‡πâ lineUserId ‡∏à‡∏≤‡∏Å URL
      house_no,
      Alley,
      province,
      district,
      sub_district,
      postal_code,
      address_verified,
      created_at,
      updated_at,
    ];
  
    db.query(query, values, (err, result) => {
      if (err) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:', err);
        return res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ' });
      }
  
      res.status(200).json({
        success: true,
        message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        address_id: result.insertId,  // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö address_id ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
      });
    });
  };
  exports.searchUser = async (req, res) => {
    const search = req.query.search || ''; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

    const query = `
        SELECT * FROM users
        WHERE name LIKE ? OR ID_card_No LIKE ? OR Phone_No LIKE ?
        ORDER BY created_at DESC
    `;

    const users = await db.query(query, [`%${search}%`, `%${search}%`, `%${search}%`]);

    res.json({ users });
};
  
exports.createBill = (req, res) => {
    const { address_id, amount_due, due_date } = req.body;
    const status = 0;

    const sql = `
      INSERT INTO bills (address_id, amount_due, status, due_date, created_at, updated_at)
      VALUES (?, ?, ?, ?, NOW(), NOW())
    `;

    db.query(sql, [address_id, amount_due, due_date, status], (err, result) => {
        if (err) {
            console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•:", err);
            return res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡πÑ‡∏î‡πâ", error: err.message });
        }

        res.status(201).json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", billId: result.insertId });
    });
};

exports.markBillAsPaid = (req, res) => {
  const { billId } = req.params;

  const sql = `UPDATE bills SET status = 1, updated_at = NOW() WHERE id = ?`;
  db.query(sql, [billId], (err, result) => {
    if (err) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", err);
      return res.status(500).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
    }
    res.status(200).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  });
};