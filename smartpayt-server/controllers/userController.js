const db = require("../db/dbConnection");
const multer = require("multer");
const upload = multer({ dest: "uploads/" });
const path = require("path");


const getUser = (req, res) => {
  const user = {
    id: 1,
    name: "John Doe",
    email: "john@example.com",
  };
  res.json(user);
};
const uploadSlip = async (req, res) => {
  try {
    console.log("üì• [upload-slip] body:", req.body);
    console.log("üì∑ [upload-slip] file:", req.file);

    const billIds = JSON.parse(req.body.bill_ids);
    const filePath = req.file.path;

    const dbConn = db.promise(); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

    for (let billId of billIds) {
      await dbConn.query(
        "INSERT INTO payment_slips (bill_id, image_path) VALUES (?, ?)",
        [billId, filePath]
      );
    }

    return res.json({ success: true });
  } catch (err) {
    console.error("‚ùå [upload-slip ERROR]:", err);
    if (!res.headersSent) {
      return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô server" });
    }
  }
};




const userInfo = async (req, res) => {
  try {
    const { lineUserId } = req.params;
    if (!lineUserId) return res.status(400).json({ message: "lineUserId ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠" });

    const query = "SELECT * FROM users WHERE lineUserId = ?";
    const [userData] = await db.promise().query(query, [lineUserId]);

    if (userData.length === 0) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });

    res.status(200).json({
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      user: userData[0],
    });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

const removeUserByID = async (req, res) => {
  try {
    const lineUserId = req.params.id;
    if (!lineUserId) return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ id" });

    const [user] = await db.promise().query("SELECT * FROM users WHERE lineUserId = ?", [lineUserId]);
    if (user.length === 0) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });

    await db.promise().query("DELETE FROM orders WHERE lineUserId = ?", [lineUserId]);
    await db.promise().query("DELETE FROM user_addresses WHERE lineUserId = ?", [lineUserId]);
    await db.promise().query("DELETE FROM users WHERE lineUserId = ?", [lineUserId]);

    res.status(200).json({ message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", details: error.message });
  }
};

const checkUser = async (req, res) => {
  const { lineUserId } = req.params;
  try {
    const [rows] = await db.promise().query("SELECT COUNT(*) AS count FROM users WHERE lineUserId = ?", [lineUserId]);
    res.json({ exists: rows[0].count > 0 });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};

// ‚úÖ Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
module.exports = {
  getUser,
  uploadSlip,
  upload,
  userInfo,
  removeUserByID,
  checkUser,
};
