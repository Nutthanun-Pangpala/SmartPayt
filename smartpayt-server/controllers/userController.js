const db = require("../db/dbConnection");
const multer = require("multer");
const path = require("path");

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î folder ‡πÄ‡∏Å‡πá‡∏ö slip
const upload = multer({
  dest: path.join(__dirname, "../uploads/"),
  limits: { fileSize: 5 * 1024 * 1024 }, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î 5MB
});

// üß© ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
const getUser = (req, res) => {
  res.json({ id: 1, name: "John Doe", email: "john@example.com" });
};

// üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏¥‡∏•
const uploadSlip = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏°‡∏≤" });
    }

    const { bill_ids } = req.body;
    if (!bill_ids) {
      return res.status(400).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö bill_ids" });
    }

    let billArray;
    try {
      billArray = Array.isArray(bill_ids) ? bill_ids : JSON.parse(bill_ids);
    } catch (e) {
      return res.status(400).json({ success: false, message: "bill_ids ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠ JSON string" });
    }

    if (!billArray.length) {
      return res.status(400).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏°‡∏µ bill id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î" });
    }

    const filePath = req.file.path;

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á payment_slips
    for (let billId of billArray) {
      await db.query(
        "INSERT INTO payment_slips (bill_id, image_path, status, uploaded_at) VALUES (?, ?, 'pending', NOW())",
        [billId, filePath]
      );
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏¥‡∏•‡πÄ‡∏õ‡πá‡∏ô 2 (‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)
    const placeholders = billArray.map(() => "?").join(",");
    await db.query(`UPDATE bills SET status = 2 WHERE id IN (${placeholders})`, billArray);

    return res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå [upload-slip ERROR]:", err);
    if (!res.headersSent) {
      return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô server" });
    }
  }
};

// üë§ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const userInfo = async (req, res) => {
  try {
    const { lineUserId } = req.params;
    if (!lineUserId)
      return res.status(400).json({ message: "lineUserId ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠" });

    const [rows] = await db.query("SELECT * FROM users WHERE lineUserId = ?", [lineUserId]);
    if (rows.length === 0)
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });

    res.status(200).json({ message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user: rows[0] });
  } catch (error) {
    console.error("‚ùå [userInfo ERROR]:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

// üóëÔ∏è ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° lineUserId
const removeUserByID = async (req, res) => {
  try {
    const lineUserId = req.params.id;
    if (!lineUserId) return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ id" });

    const [user] = await db.query("SELECT * FROM users WHERE lineUserId = ?", [lineUserId]);
    if (user.length === 0)
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏õ‡∏•‡∏≤‡∏¢‡∏™‡∏≤‡∏¢)
    await db.query(
      `DELETE ps FROM payment_slips ps 
       JOIN bills b ON ps.bill_id = b.id 
       JOIN addresses a ON b.address_id = a.address_id 
       WHERE a.lineUserId = ?`,
      [lineUserId]
    );
    await db.query(
      `DELETE b FROM bills b 
       JOIN addresses a ON b.address_id = a.address_id 
       WHERE a.lineUserId = ?`,
      [lineUserId]
    );
    await db.query("DELETE FROM addresses WHERE lineUserId = ?", [lineUserId]);
    await db.query("DELETE FROM users WHERE lineUserId = ?", [lineUserId]);

    res.status(200).json({ message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå [removeUserByID ERROR]:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", details: error.message });
  }
};

// üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
const checkUser = async (req, res) => {
  const { lineUserId } = req.params;
  try {
    const [rows] = await db.query(
      "SELECT COUNT(*) AS count FROM users WHERE lineUserId = ?",
      [lineUserId]
    );
    res.json({ exists: rows[0].count > 0 });
  } catch (err) {
    console.error("‚ùå [checkUser ERROR]:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};

module.exports = {
  getUser,
  uploadSlip,
  upload,
  userInfo,
  removeUserByID,
  checkUser,
};
