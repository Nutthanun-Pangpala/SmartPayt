const db = require("../db/dbConnection");
const axios = require("axios");
const bwipjs = require('bwip-js');

require("dotenv").config();

const access_token = process.env.LINE_ACCESS_TOKEN;


exports.registerAccount = async (req, res) => {
  try {
    console.log("üîπ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Frontend:", req.body);

    const { lineUserId, name, ID_card_No, Phone_No, Email } = req.body;

    if (!ID_card_No || !Phone_No || !Email) {
      console.log("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö:", { ID_card_No, Phone_No, Email });
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    if (Phone_No.length !== 10) {
      console.log("‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", Phone_No);
      return res.status(400).json({ message: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 10 ‡∏´‡∏•‡∏±‡∏Å" });
    }

    console.log("üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...");
    const checkQuery = "SELECT * FROM users WHERE lineUserId = ? OR ID_card_No = ?";
    const [existingUser] = await db.promise().query(checkQuery, [lineUserId, ID_card_No]);

    if (existingUser.length > 0) {
      console.log("‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:", existingUser);
      return res.status(400).json({ message: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
    }

    console.log("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...");
    const insertQuery = `
      INSERT INTO users (lineUserId, name, ID_card_No, Phone_No, Email)
      VALUES (?, ?, ?, ?, ?)
    `;
    const [result] = await db.promise().query(insertQuery, [
      lineUserId, name, ID_card_No, Phone_No, Email
    ]);

    if (result.affectedRows === 0) {
      console.log("‚ùå INSERT ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      return res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ" });
    }

    console.log("‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

    res.status(201).json({
      message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      userData: { lineUserId, name, ID_card_No, Phone_No, Email },
    });

  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", error: error.message });
  }
};

exports.registerAddress = async (req, res) => {
  try {
    const { 
      lineUserId, 
      house_no, 
      alley, 
      province, 
      district, 
      sub_district, 
      postal_code 
    } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    if (!lineUserId || !house_no || !province || !district || !sub_district || !postal_code) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ lineUserId ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [user] = await db.promise().query("SELECT * FROM users WHERE lineUserId = ?", [lineUserId]);

    if (user.length === 0) {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existingAddress] = await db.promise().query(
      `SELECT * FROM addresses 
      WHERE lineUserId = ? 
      AND house_no = ? 
      AND alley = ? 
      AND sub_district = ? 
      AND district = ? 
      AND province = ? 
      AND postal_code = ?`,
      [lineUserId, house_no, alley || "", sub_district, district, province, postal_code]
    );

    if (existingAddress.length > 0) {
      return res.status(400).json({ message: "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
    const insertQuery = `
      INSERT INTO addresses (
        lineUserId, house_no, Alley, province, district, sub_district, postal_code, 
        address_verified, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    `;

    const [result] = await db.promise().query(insertQuery, [
      lineUserId, house_no, alley || "", province, district, sub_district, postal_code, false
    ]);

    if (result.affectedRows === 0) {
      return res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ" });
    }

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE
    try {
      const access_token = process.env.LINE_ACCESS_TOKEN;
      await axios.post(
        "https://api.line.me/v2/bot/message/push",
        {
          to: lineUserId,
          messages: [
            {
              type: "text",
              text: `üïû ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö!\nüè† ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: ${house_no}\nüìç ${sub_district}, ${district}, ${province} ${postal_code}\nüü† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏®‡∏ö‡∏≤‡∏•`,
            },
          ],
        },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${access_token}`,
          },
        }
      );
    } catch (lineError) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE:", lineError);
    }

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
    res.status(201).json({
      message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      addressData: { 
        lineUserId, house_no, alley, province, district, sub_district, postal_code, address_verified: false 
      },
    });

  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};


exports.userAddressList = async (req, res) => {
  const { page = 1, search = '', sortField = 'id', sortDirection = 'ASC' } = req.query;
  const limit = 10;
  const offset = (page - 1) * limit;

  let searchCondition = 'WHERE 1=1'; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ WHERE ‡πÑ‡∏°‡πà Error
  let searchParams = [];

  if (search) {
      searchCondition += `
          AND (c.ID_card_No LIKE ? 
          OR c.Phone_No LIKE ? 
          OR ch.Address LIKE ?)
      `;
      searchParams = [`%${search}%`, `%${search}%`, `%${search}%`];
  }

  const countSql = `
      SELECT COUNT(*) AS total 
      FROM customers c
      LEFT JOIN customer_homes ch ON c.id = ch.customer_id
      ${searchCondition}
  `;

  const sql = `
  SELECT c.id, c.Name, c.ID_card_No, c.Phone_No, ch.Home_ID, ch.Address 
  FROM customers c
  LEFT JOIN customer_homes ch ON c.id = ch.customer_id
  ${searchCondition}
  ORDER BY ?? ${sortDirection === 'desc' ? 'DESC' : 'ASC'}
  LIMIT ? OFFSET ?
`;

  db.query(countSql, searchParams, (err, countResults) => {
      if (err) {
          return res.status(500).json({ message: 'Failed to fetch users', error: err.message });
      }

      const total = countResults[0].total;
      const totalPages = Math.ceil(total / limit);

      db.query(sql, [sortField, ...searchParams, parseInt(limit), parseInt(offset)], (err, results) => {
          if (err) {
              return res.status(500).json({ message: 'Failed to fetch users', error: err.message });
          }

          res.json({
              users: results,
              totalPages,  // üëà ‡∏™‡πà‡∏á totalPages ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
              currentPage: parseInt(page),
              totalUsers: total
          });
      });
  });

};

exports.reportiIssue = (req, res) => {
  const { Issues, lineUserId, name } = req.body;

  // Check for missing fields
  if (!Issues || !lineUserId || !name) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
  }

  const sql = 'INSERT INTO issues (Issues, lineUserId, name) VALUES (?, ?, ?)';
  db.query(sql, [Issues, lineUserId, name], async (err, result) => {
    if (err) {
      console.error('‚ùå Insert Error:', err);
      return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    try {
      await axios.post(
        "https://api.line.me/v2/bot/message/push",
        {
          to: lineUserId,
          messages: [
            {
              type: "text",
              text: `‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á!\nüìå ‡∏ä‡∏∑‡πà‡∏≠: ${name}\nüìå ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${Issues}`,
            },
          ],
        },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${access_token}`, // Use your LINE bot access token
          },
        }
      );

      // Respond after sending the message
      res.json({ message: '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
    } catch (lineError) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE:", lineError);
      res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE' });
    }
  });
};

exports.userAddress = async (req, res) => {
  try {
    const { lineUserId } = req.params; // ‡∏î‡∏∂‡∏á lineUserId ‡∏à‡∏≤‡∏Å URL parameters

    if (!lineUserId) {
      return res.status(400).json({ message: "lineUserId ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠" });
    }

    // Query ‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const query = "SELECT * FROM addresses WHERE lineUserId = ?";
    const [addresses] = await db.promise().query(query, [lineUserId]);

    if (addresses.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" });
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    res.status(200).json({
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      addresses: addresses, // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö arrayN
    });

  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};


exports.userAddressBill = async (req, res) => {
  try {
    const { address_id } = req.params;

    // Modify query to fetch only bills with a status of "1" (paid)
    const query = "SELECT * FROM bills WHERE address_id = ? AND status = 0";
    const [bills] = await db.promise().query(query, [address_id]);

    if (bills.length === 0) {
      return res.status(200).json({ bills: [] }); // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å 404 ‚Üí 200 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏¥‡∏•‡πÄ‡∏õ‡πá‡∏ô []
    }

    res.status(200).json({ bills });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};
exports.generateBarcode = (req, res) => {
  const { addressId } = req.params;

  bwipjs.toBuffer({
    bcid: 'code128',        // Barcode type
    text: addressId,        // Text to encode in the barcode
    scale: 3,               // Barcode scale
    height: 10,             // Barcode height
    includetext: true,      // Include the text under the barcode
  })
  .then((buffer) => {
    // Set headers for image response
    res.setHeader('Content-Type', 'image/png');
    res.send(buffer);  // Send the generated barcode buffer as an image
  })
  .catch((error) => {
    console.error("Error generating barcode:", error);
    res.status(500).json({ message: 'Error generating barcode', error: error.message });
  });
};